{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"-zVh7LT1Zk1d"},"outputs":[],"source":["\n","\n","\n","#Programm to implent convulational neural network algorithm using Keras framework\n","(Lenet-5)"]},{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":3272,"status":"ok","timestamp":1701651353717,"user":{"displayName":"Sreelakshmi p","userId":"15613836138081509083"},"user_tz":-330},"id":"mDR-lDenZ0Rx"},"outputs":[],"source":["from keras import datasets,layers,models\n","from keras.datasets import mnist\n","from keras.models import Sequential\n","from keras.layers import Conv2D,MaxPooling2D,Flatten,Dense\n","from keras.utils import to_categorical\n","import tensorflow as tf"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VM7TP3GRaQPM"},"outputs":[],"source":["#Load dataset\n","(x_train,y_train),(x_test,y_test)=mnist.load_data()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"SDpjCVcvagWf"},"outputs":[{"name":"stdout","output_type":"stream","text":["(60000, 28, 28)\n","(10000, 28, 28)\n"]}],"source":["print(x_train.shape)\n","print(x_test.shape)\n","#print(x_train[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"aOyi3ukXPfVt"},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"v1tHialbbgzj"},"outputs":[],"source":["#Normalize pixel values between 0 and 1\n","x_train=x_train/255.0\n","x_test=x_test/255.0\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UDRsTBj5buPv"},"outputs":[],"source":["#Build the Lenet 5 model\n","model=models.Sequential([\n","    layers.Conv2D(6,(5,5),activation='relu',input_shape=(28,28,1)),\n","    layers.AveragePooling2D((2,2)),\n","    layers.Conv2D(16,(5,5),activation='relu'),\n","    layers.AveragePooling2D((2,2)),\n","    layers.Flatten(),\n","    layers.Dense(120,activation='relu'),\n","    layers.Dense(84,activation='relu'),\n","    layers.Dense(10,activation='softmax')\n","])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"KPJyXDN9lsKL"},"outputs":[],"source":["model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1700247648013,"user":{"displayName":"Sreelakshmi p","userId":"15613836138081509083"},"user_tz":480},"id":"wVFvmw0slxWY","outputId":"3819e444-e97a-4b4c-a425-3cc53844283c"},"outputs":[{"name":"stdout","output_type":"stream","text":["Model: \"sequential_5\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d_11 (Conv2D)          (None, 24, 24, 6)         156       \n","                                                                 \n"," average_pooling2d_10 (Aver  (None, 12, 12, 6)         0         \n"," agePooling2D)                                                   \n","                                                                 \n"," conv2d_12 (Conv2D)          (None, 8, 8, 16)          2416      \n","                                                                 \n"," average_pooling2d_11 (Aver  (None, 4, 4, 16)          0         \n"," agePooling2D)                                                   \n","                                                                 \n"," flatten_5 (Flatten)         (None, 256)               0         \n","                                                                 \n"," dense_15 (Dense)            (None, 120)               30840     \n","                                                                 \n"," dense_16 (Dense)            (None, 84)                10164     \n","                                                                 \n"," dense_17 (Dense)            (None, 10)                850       \n","                                                                 \n","=================================================================\n","Total params: 44426 (173.54 KB)\n","Trainable params: 44426 (173.54 KB)\n","Non-trainable params: 0 (0.00 Byte)\n","_________________________________________________________________\n"]}],"source":["model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":754},"executionInfo":{"elapsed":686,"status":"error","timestamp":1700247608649,"user":{"displayName":"Sreelakshmi p","userId":"15613836138081509083"},"user_tz":480},"id":"ofbqLIAYmIMk","outputId":"693b7cea-735e-4ab2-aac9-b97e2c8cb123"},"outputs":[{"name":"stdout","output_type":"stream","text":["Epoch 1/5\n"]},{"ename":"ValueError","evalue":"ignored","output_type":"error","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m\u003cipython-input-36-6d459c4348e6\u003e\u001b[0m in \u001b[0;36m\u003ccell line: 1\u003e\u001b[0;34m()\u001b[0m\n\u001b[0;32m----\u003e 1\u001b[0;31m \u001b[0mlearn\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m64\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     68\u001b[0m             \u001b[0;31m# To get the full stack trace, call:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m             \u001b[0;31m# `tf.debugging.disable_traceback_filtering()`\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 70\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwith_traceback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfiltered_tb\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     71\u001b[0m         \u001b[0;32mfinally\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     72\u001b[0m             \u001b[0;32mdel\u001b[0m \u001b[0mfiltered_tb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\u001b[0m in \u001b[0;36mtf__train_function\u001b[0;34m(iterator)\u001b[0m\n\u001b[1;32m     13\u001b[0m                 \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---\u003e 15\u001b[0;31m                     \u001b[0mretval_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconverted_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep_function\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mag__\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mld\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfscope\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m                 \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m                     \u001b[0mdo_return\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: in user code:\n\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1377, in train_function  *\n        return step_function(self, iterator)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1360, in step_function  **\n        outputs = model.distribute_strategy.run(run_step, args=(data,))\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1349, in run_step  **\n        outputs = model.train_step(data)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1127, in train_step\n        loss = self.compute_loss(x, y, y_pred, sample_weight)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py\", line 1185, in compute_loss\n        return self.compiled_loss(\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/engine/compile_utils.py\", line 277, in __call__\n        loss_value = loss_obj(y_t, y_p, sample_weight=sw)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/losses.py\", line 143, in __call__\n        losses = call_fn(y_true, y_pred)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/losses.py\", line 270, in call  **\n        return ag_fn(y_true, y_pred, **self._fn_kwargs)\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/losses.py\", line 2221, in categorical_crossentropy\n        return backend.categorical_crossentropy(\n    File \"/usr/local/lib/python3.10/dist-packages/keras/src/backend.py\", line 5575, in categorical_crossentropy\n        target.shape.assert_is_compatible_with(output.shape)\n\n    ValueError: Shapes (None, 1) and (None, 10) are incompatible\n"]}],"source":["learn=model.fit(x_train,y_train,epochs=5,batch_size=64,validation_data=(x_test,y_test))"]}],"metadata":{"colab":{"authorship_tag":"ABX9TyONZm+YmC0Y+kebxCig+fzQ","name":"","provenance":[{"file_id":"1gqDf05YU_LLP1o_bqpgafqBjMFJ42WrG","timestamp":1700247925483}],"version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}