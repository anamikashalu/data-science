{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1mp5vQSdz6NEnG_Js_oZBDhnkanB39ztt","timestamp":1698168928618},{"file_id":"1lwN8NCC0u_t6aAhR6b584Cp3Z74ap8Z9","timestamp":1660791510876},{"file_id":"1hxbtMGNro1p9QXlh11gKD4RJKMCNeX1W","timestamp":1638859559007},{"file_id":"1vXcs3dt_WYNzhsR-drNc1J4FXQ6WRfnP","timestamp":1638859214456},{"file_id":"1q7t5i5ytqdXnT6VIB5SvQ_Yw9ZAoXqmM","timestamp":1600688111939},{"file_id":"108JcwWYd1T6A25wxKGyJZXOJOM0soQgC","timestamp":1600686343947},{"file_id":"1p0PZlvuoDuOiRPsauKCSr1XbjfxdbfC2","timestamp":1600681611861}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"m9dW2iOz-9Y-"},"source":["### Problem Statement\n","\n","As an owner of a startup, you wish to forecast the sales of your product to plan how much money should be spent on advertisements. This is because the sale of a product is usually proportional to the money spent on advertisements.\n","\n","Predict the impact of TV advertising on your product sales by performing simple linear regression analysis.\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"l2W51RVUDq5Q"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"b-0V3uyC_wkC"},"source":["### List of Activities\n","\n","**Activity 1:** Analysing the dataset\n","\n","  \n","**Activity 2:**  Train-Test split\n","\n","**Activity 3:**  Model training\n","\n","**Activity 4:** Plotting the best fit line\n","\n","**Activity 5:** Model prediction\n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"iPsloISKDsAG"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"hEtQxeW__6oW"},"source":["\n","#### Activity 1:  Analysing the Dataset\n","\n","Create a Pandas DataFrame for **Advertising-Sales** dataset using the below link. This dataset contains information about the money spent on the TV, radio and newspaper advertisement (in thousand dollars) and their generated sales (in thousand units). The dataset consists of examples that are divided by 1000.\n","\n","**Dataset Link:** https://raw.githubusercontent.com/smitha-ks/Notebooks/Datasets/Advertising.csv\n","\n","Also, print the first five rows of the dataset. Check for null values and treat them accordingly.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"BdIrU2M0AWLK","executionInfo":{"status":"ok","timestamp":1698167844338,"user_tz":-330,"elapsed":539,"user":{"displayName":"Sreelakshmi p","userId":"15613836138081509083"}},"outputId":"78d73ad2-5843-4fa6-c4bd-d1b695142880","colab":{"base_uri":"https://localhost:8080/","height":206}},"source":["# Import modules\n","import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sb\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import r2_score,mean_squared_error,mean_absolute_error\n","\n","# Load the dataset\n","githuburl=\"https://raw.githubusercontent.com/smitha-ks/Notebooks/Datasets/Advertising.csv\"\n","df = pd.read_csv(githuburl)\n","# Print first five rows using head() function\n","df.head()\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Unnamed: 0     TV  radio  newspaper  sales\n","0           1  230.1   37.8       69.2   22.1\n","1           2   44.5   39.3       45.1   10.4\n","2           3   17.2   45.9       69.3    9.3\n","3           4  151.5   41.3       58.5   18.5\n","4           5  180.8   10.8       58.4   12.9"],"text/html":["\n","  <div id=\"df-f97295b7-ecb2-4414-98ae-a82f992892e1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>TV</th>\n","      <th>radio</th>\n","      <th>newspaper</th>\n","      <th>sales</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>230.1</td>\n","      <td>37.8</td>\n","      <td>69.2</td>\n","      <td>22.1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>44.5</td>\n","      <td>39.3</td>\n","      <td>45.1</td>\n","      <td>10.4</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>17.2</td>\n","      <td>45.9</td>\n","      <td>69.3</td>\n","      <td>9.3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>151.5</td>\n","      <td>41.3</td>\n","      <td>58.5</td>\n","      <td>18.5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>180.8</td>\n","      <td>10.8</td>\n","      <td>58.4</td>\n","      <td>12.9</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f97295b7-ecb2-4414-98ae-a82f992892e1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f97295b7-ecb2-4414-98ae-a82f992892e1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f97295b7-ecb2-4414-98ae-a82f992892e1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2182f1f2-bb3c-4a34-be33-d7653cef49e6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2182f1f2-bb3c-4a34-be33-d7653cef49e6')\"\n","            title=\"Suggest charts.\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2182f1f2-bb3c-4a34-be33-d7653cef49e6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"8LXtVcLdhxo7"},"source":["# Check if there are any null values. If any column has null values, treat them accordingly\n","print(df.isnull().sum())"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rm8nBjLwiqzC"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"lx5UydtLIYyG"},"source":["#### Activity 2: Train-Test Split\n","\n","For simple linear regression, consider only the effect of **TV ads** on sales. Thus, `TV` is the feature variable and `Sales` is the target variable.\n","\n","Split the dataset into training set and test set such that the training set contains 67% of the instances and the remaining instances will become the test set.\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"REuLvaloGigG","executionInfo":{"status":"ok","timestamp":1698168433504,"user_tz":-330,"elapsed":643,"user":{"displayName":"Sreelakshmi p","userId":"15613836138081509083"}},"outputId":"1606e1c6-7771-4f75-8b2f-771f1f967609","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Split the DataFrame into the training and test sets.\n","x=df[\"TV\"]\n","print(x)\n","y=df[\"sales\"]\n","x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.33,random_state=1)\n","print(x_train.shape,x_test.shape,y_train.shape,y_test.shape)\n","x_train_reshape=x_train.values.reshape(-1,1)\n","y_train_reshape=y_train.values.reshape(-1,1)\n","x_test_reshape=x_test.values.reshape(-1,1)\n","y_test_reshape=y_test.values.reshape(-1,1)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0      230.1\n","1       44.5\n","2       17.2\n","3      151.5\n","4      180.8\n","       ...  \n","195     38.2\n","196     94.2\n","197    177.0\n","198    283.6\n","199    232.1\n","Name: TV, Length: 200, dtype: float64\n","(134,) (66,) (134,) (66,)\n"]}]},{"cell_type":"markdown","metadata":{"id":"fSxPcV0ySZDu"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"-k2GAbeQQq7Q"},"source":["#### Activity 3: Model Training\n","\n","Train the simple regression model using **training data** to obtain the best fit line $y = mx + c$.\n"]},{"cell_type":"code","metadata":{"id":"UyGNYvU7H0hR","executionInfo":{"status":"ok","timestamp":1698168825323,"user_tz":-330,"elapsed":652,"user":{"displayName":"Sreelakshmi p","userId":"15613836138081509083"}},"outputId":"f3f6c757-9b3f-4f63-a282-275ce097a69c","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Calculate the slope and intercept values for the best fit line.\n","lr=LinearRegression()\n","lr.fit(x_train_reshape,y_train_reshape)\n","c=lr.intercept_\n","print(c)\n","m=lr.coef_\n","print(m)\n"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[7.03821734]\n","[[0.04732271]]\n"]}]},{"cell_type":"markdown","metadata":{"id":"cLJaPWLtfY8g"},"source":["**Q:** What is the equation obtained for the best fit line of this model?\n","\n","**A:**"]},{"cell_type":"markdown","metadata":{"id":"2_3_qkZThe1W"},"source":["y=0.4732271x+7.03821734---"]},{"cell_type":"markdown","metadata":{"id":"3AO9GzYGe0bm"},"source":["#### Activity 4: Plotting the Best Fit Line\n","\n","After obtaining the slope and intercept values for the best fit line, plot this line along with the scatter plot to see how well it fits the points.\n"]},{"cell_type":"code","metadata":{"id":"6zzogPW1H46r","executionInfo":{"status":"ok","timestamp":1698168618242,"user_tz":-330,"elapsed":1013,"user":{"displayName":"Sreelakshmi p","userId":"15613836138081509083"}},"outputId":"379c3836-7db2-4cae-ee1d-e575d6d4c3f9","colab":{"base_uri":"https://localhost:8080/","height":447}},"source":["#  Plot the regression line in the scatter plot between Sales and TV advertisment values.\n","plt.scatter(x_train_reshape,y_train_reshape,color='green')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7ec995cd3760>"]},"metadata":{},"execution_count":14},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"VCnDWR0lSayX"},"source":["---"]},{"cell_type":"markdown","metadata":{"id":"ZcXTWRKuRAIs"},"source":["#### Activity 5: Model Prediction\n","\n","**Q:** If you are planning to invest $50,000 dollars in TV advertising, how many unit of sales can be predicted according to this simple linear regression model?\n","\n","**A:**\n","\n"]},{"cell_type":"code","metadata":{"id":"RKKT9L8nIfL_","executionInfo":{"status":"ok","timestamp":1698168913032,"user_tz":-330,"elapsed":528,"user":{"displayName":"Sreelakshmi p","userId":"15613836138081509083"}},"outputId":"6569933e-e2c8-4898-d77c-db76130926cf","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Calculating sales value against $50,000 spent in TV ads\n","#y=mx+c\n","y=0.04732271*50000+7.03821734\n","print(y)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2373.1737173399997\n"]}]},{"cell_type":"markdown","metadata":{"id":"6Ybzt1WtVTiz"},"source":["---"]}]}